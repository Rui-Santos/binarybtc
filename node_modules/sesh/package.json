{
  "name": "sesh",
  "description": "super simple session middleware for node.js, even has optional 'magic' sessions which monkey patch the httpServer with one line!",
  "version": "0.1.0",
  "author": {
    "name": "Marak Squires",
    "email": "marak.squires@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/marak/session.js.git"
  },
  "keywords": [
    "sessions",
    "cookies",
    "middleware",
    "session"
  ],
  "dependencies": {
    "response": ">= 0.1.0"
  },
  "main": "./lib/core",
  "engines": {
    "node": ">= 0.2.0"
  },
  "readme": "# session.js - super simple session management for node.js\n\n\n## Installation\n\n### Installing npm (node package manager)\n<pre>\n  curl http://npmjs.org/install.sh | sh\n</pre>\n\n### Installing session.js\n<pre>\n  npm install sesh\n</pre>\n\n### Example request.session\n\n    {\n        \"id\": \"m2ENokSCHY3\",\n        \"data\": {\n            \"history\": [\n                \"/\"\n            ],\n            \"user\": \"Guest\"\n        },\n        \"path\": \"/\",\n        \"persistent\": true,\n        \"lifetime\": 604800,\n        \"expiration\": 1291446379596\n    }\n\n\n### Usage\n\n#### Using session.js as a middle-ware\n\n      var http = require('http'), \n          session = require('./lib/core').session;\n\n      // let's create a basic http server!\n      http.createServer(function (request, response) {\n\n        // before we process any part of the request, let's use the session middle-ware!\n        session(request, response, function(request, response){\n\n          // now we can access request.session\n\n          // after the session middleware has executed, let's finish processing the request\n          response.writeHead(200, {'Content-Type': 'text/plain'});\n          response.write('request.session: \\n' + JSON.stringify(request.session, 2, true));\n          response.end();\n    \n        });\n\n      }).listen(8080);\n\n      /* server started */  \n      console.log('> hello world running on port 8080');\n\n\n#### Magic Monkey Punched Middle-ware Sessions (automatically patches httpServer)\n\n    var http = require('http'),\n        session = require('./lib/core').magicSession(); // special magic, now all requests have sessions!\n\n    // let's create a basic http server!\n    http.createServer(function (request, response) {\n\n      // now we can access request.session\n\n      // let's finish processing the request\n      response.writeHead(200, {'Content-Type': 'text/plain'});\n      response.write('request.session: \\n' + JSON.stringify(request.session, 2, true));\n      response.end();\n\n    }).listen(8080);\n\n    /* server started */  \n    console.log('> hello world running on port 8080');\n\n#### Creating a super simple login / logout feature\n\nOne of the best things about having a persistent session object per user, is having the ability to create user logins. The actual way you want to implement authentication is up to, but here is a basic pattern to follow. Please, remember this method of authentication is just an example:\n    \n    var http = require('http'),\n        session = require('./lib/core').magicSession();\n\n    // let's create a basic http server!\n    http.createServer(function (request, response) {\n\n      // please note: this is just an example of how to hook auth into session.js, its not ideal at all\n\n      // super basic logout\n      if(request.url === '/logout'){\n        request.session.data.user = \"Guest\";\n        response.writeHead(200, {'Content-Type': 'text/plain'});\n        response.write('You\\'ve been logged out');\n        response.end();\n        return;\n      }\n\n      // let's hardcode a username and password variable into the url\n      var urlParams = require('url').parse(request.url, true).query || {};\n\n      if(typeof urlParams.name != 'undefined'){\n        // if the \"name\" parameter has been sent, lets log in as that user\n        request.session.data.user = urlParams.name;\n      }\n  \n      // request.session.data.user always defaults to \"Guest\"\n      if(request.session.data.user == \"Guest\"){\n        response.writeHead(200, {'Content-Type': 'text/plain'});\n        response.write('Hello, you are the Guest user');\n        response.end();\n      }\n      else{\n        response.writeHead(200, {'Content-Type': 'text/plain'});\n        response.write('Hello, you are ' + request.session.data.user);\n        response.end();\n      }\n\n\n    }).listen(8080);\n\n    /* server started */  \n    console.log('> hello world running on port 8080');\n\n    \nOnce you have this running you can do the following:\n\n    GET http://localhost:8080/\n    Hello, you are the Guest user\n    \n    GET http://localhost:8080/?name=Marak\n    Hello, you are Marak\n    \n    GET http://localhost:8080/\n    Hello, you are Marak\n    \n    GET http://localhost:8080/logout\n    You've been logged out\n    \n    GET http://localhost:8080 \n    Hello, you are the Guest user\n    \n# Requirements \n\n     npm install response\n     \n# Authors\n\n     inimino@inimino.org, Marak Squires\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/marak/session.js/issues"
  },
  "homepage": "https://github.com/marak/session.js",
  "_id": "sesh@0.1.0",
  "dist": {
    "shasum": "d2a6cf49abb4c0a3fb042d3ca747a08080e79bb3"
  },
  "_from": "sesh@",
  "_resolved": "http://registry.npmjs.org/sesh/-/sesh-0.1.0.tgz"
}
